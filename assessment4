// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Degen_Token is ERC20, Ownable {
    constructor() ERC20("Degen", "DGN") {}

    function mint(address to, uint amount) public onlyOwner {
        _mint(to, amount);
    }
     //Function to redeem the token
    function redeem(uint amount) public {
        require(balanceOf(msg.sender) >= amount, "Not enough tokens");
        _burn(msg.sender, amount);
        
    }
     // Function to burn the specific amount of token
    function burn(uint256 amount) public {
        require(balanceOf(msg.sender) >= amount, "Not enough tokens");
        _burn(msg.sender, amount);
    }
     // Function to transfer tokens from one account address to another account address
    function transfer(address to, uint amount) public virtual override returns (bool) {
        _transfer(_msgSender(), to, amount);
        return true;
    }
    // Function to get the token balance of the any account address
    function getBalanceof() external view returns (uint) {
        return balanceOf(msg.sender);
}
}

//0x7d27DEcaAB224FAde5D8bDAbecf85700478C1D2C Zero balance
